"""Setting up MediaFusion Tables

Revision ID: 4829e203ecaf
Revises: 
Create Date: 2024-11-22 15:21:37.757408

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision: str = "4829e203ecaf"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    conn.execute(sa.text("CREATE EXTENSION IF NOT EXISTS pg_trgm;"))
    conn.execute(sa.text("CREATE EXTENSION IF NOT EXISTS btree_gin;"))

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "announce_url",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "base_metadata",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("MOVIE", "SERIES", "TV", "EVENTS", name="mediatype"),
            nullable=False,
        ),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("year", sa.Integer(), nullable=True),
        sa.Column("poster", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_poster_working", sa.Boolean(), nullable=False),
        sa.Column("is_add_title_to_poster", sa.Boolean(), nullable=False),
        sa.Column("background", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("runtime", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("website", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("title", "year"),
    )
    op.create_index(
        "idx_base_meta_type_title", "base_metadata", ["type", "title"], unique=False
    )
    op.create_index(
        "idx_base_title_search",
        "base_metadata",
        ["title"],
        unique=False,
        postgresql_using="gin",
        postgresql_ops={"title": "gin_trgm_ops"},
    )
    op.create_index(
        op.f("ix_base_metadata_type"), "base_metadata", ["type"], unique=False
    )
    op.create_index(
        op.f("ix_base_metadata_updated_at"),
        "base_metadata",
        ["updated_at"],
        unique=False,
    )
    op.create_table(
        "catalog",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "genre",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_genre_name"), "genre", ["name"], unique=True)
    op.create_table(
        "language",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "namespace",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "parental_certificate",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_parental_certificate_name"),
        "parental_certificate",
        ["name"],
        unique=True,
    )
    op.create_table(
        "star",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_star_name"), "star", ["name"], unique=False)
    op.create_table(
        "aka_title",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("media_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["media_id"], ["base_metadata.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_aka_title_media_id"), "aka_title", ["media_id"], unique=False
    )
    op.create_index(op.f("ix_aka_title_title"), "aka_title", ["title"], unique=False)
    op.create_table(
        "media_catalog_link",
        sa.Column("media_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("catalog_id", sa.Integer(), nullable=False),
        sa.Column("priority", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["catalog_id"], ["catalog.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["media_id"], ["base_metadata.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("media_id", "catalog_id"),
        postgresql_partition_by="LIST (catalog_id)",
    )
    op.create_index(
        op.f("ix_media_catalog_link_priority"),
        "media_catalog_link",
        ["priority"],
        unique=False,
    )
    op.create_table(
        "media_genre_link",
        sa.Column("media_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("genre_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["genre_id"], ["genre.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["media_id"], ["base_metadata.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("media_id", "genre_id"),
    )
    op.create_table(
        "media_parental_certificate_link",
        sa.Column("media_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("certificate_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["certificate_id"], ["parental_certificate.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["media_id"], ["base_metadata.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("media_id", "certificate_id"),
    )
    op.create_table(
        "media_star_link",
        sa.Column("media_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("star_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["media_id"], ["base_metadata.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["star_id"], ["star.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("media_id", "star_id"),
    )
    op.create_table(
        "movie_metadata",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("imdb_rating", sa.Float(), nullable=True),
        sa.Column(
            "parent_guide_nudity_status",
            sa.Enum(
                "NONE", "MILD", "MODERATE", "SEVERE", "UNKNOWN", name="nuditystatus"
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["id"], ["base_metadata.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_movie_metadata_imdb_rating"),
        "movie_metadata",
        ["imdb_rating"],
        unique=False,
    )
    op.create_index(
        op.f("ix_movie_metadata_parent_guide_nudity_status"),
        "movie_metadata",
        ["parent_guide_nudity_status"],
        unique=False,
    )
    op.create_index(
        op.f("ix_movie_metadata_updated_at"),
        "movie_metadata",
        ["updated_at"],
        unique=False,
    )
    op.create_table(
        "series_metadata",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("end_year", sa.Integer(), nullable=True),
        sa.Column("imdb_rating", sa.Float(), nullable=True),
        sa.Column(
            "parent_guide_nudity_status",
            sa.Enum(
                "NONE", "MILD", "MODERATE", "SEVERE", "UNKNOWN", name="nuditystatus"
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["id"], ["base_metadata.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_series_metadata_end_year"),
        "series_metadata",
        ["end_year"],
        unique=False,
    )
    op.create_index(
        op.f("ix_series_metadata_imdb_rating"),
        "series_metadata",
        ["imdb_rating"],
        unique=False,
    )
    op.create_index(
        op.f("ix_series_metadata_parent_guide_nudity_status"),
        "series_metadata",
        ["parent_guide_nudity_status"],
        unique=False,
    )
    op.create_index(
        op.f("ix_series_metadata_updated_at"),
        "series_metadata",
        ["updated_at"],
        unique=False,
    )
    op.create_table(
        "torrent_stream",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("meta_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("torrent_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("size", sa.BigInteger(), nullable=False),
        sa.Column("filename", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("file_index", sa.Integer(), nullable=True),
        sa.Column("source", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("resolution", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("codec", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("quality", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("audio", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("seeders", sa.Integer(), nullable=True),
        sa.Column("is_blocked", sa.Boolean(), nullable=False),
        sa.Column(
            "indexer_flag",
            sa.Enum("FREELEACH", "SEMI_PRIVATE", "PRIVATE", name="indexertype"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["meta_id"], ["base_metadata.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_torrent_meta_created",
        "torrent_stream",
        ["meta_id", "created_at"],
        unique=False,
        postgresql_where="NOT is_blocked",
    )
    op.create_index(
        "idx_torrent_meta_source", "torrent_stream", ["meta_id", "source"], unique=False
    )
    op.create_index(
        "idx_torrent_stream_meta_blocked",
        "torrent_stream",
        ["meta_id"],
        unique=False,
        postgresql_where="NOT is_blocked",
    )
    op.create_index(
        op.f("ix_torrent_stream_is_blocked"),
        "torrent_stream",
        ["is_blocked"],
        unique=False,
    )
    op.create_index(
        op.f("ix_torrent_stream_meta_id"), "torrent_stream", ["meta_id"], unique=False
    )
    op.create_index(
        op.f("ix_torrent_stream_source"), "torrent_stream", ["source"], unique=False
    )
    op.create_index(
        op.f("ix_torrent_stream_updated_at"),
        "torrent_stream",
        ["updated_at"],
        unique=False,
    )
    op.create_table(
        "tv_metadata",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("country", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("tv_language", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("logo", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(["id"], ["base_metadata.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_tv_metadata_country"), "tv_metadata", ["country"], unique=False
    )
    op.create_index(
        op.f("ix_tv_metadata_tv_language"), "tv_metadata", ["tv_language"], unique=False
    )
    op.create_index(
        op.f("ix_tv_metadata_updated_at"), "tv_metadata", ["updated_at"], unique=False
    )
    op.create_table(
        "tv_stream",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("meta_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("ytId", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("externalUrl", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("source", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("country", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_working", sa.Boolean(), nullable=False),
        sa.Column("test_failure_count", sa.Integer(), nullable=False),
        sa.Column("drm_key_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("drm_key", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("behaviorHints", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(["meta_id"], ["base_metadata.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("url", "ytId"),
    )
    op.create_index(
        "idx_tv_stream_meta_working",
        "tv_stream",
        ["meta_id", "is_working"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tv_stream_country"), "tv_stream", ["country"], unique=False
    )
    op.create_index(
        op.f("ix_tv_stream_is_working"), "tv_stream", ["is_working"], unique=False
    )
    op.create_index(
        op.f("ix_tv_stream_meta_id"), "tv_stream", ["meta_id"], unique=False
    )
    op.create_index(op.f("ix_tv_stream_source"), "tv_stream", ["source"], unique=False)
    op.create_index(
        op.f("ix_tv_stream_updated_at"), "tv_stream", ["updated_at"], unique=False
    )
    op.create_table(
        "season",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "torrent_stream_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("season_number", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["torrent_stream_id"], ["torrent_stream.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_season_torrent_number",
        "season",
        ["torrent_stream_id", "season_number"],
        unique=False,
    )
    op.create_table(
        "torrent_announce_link",
        sa.Column("torrent_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("announce_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["announce_id"], ["announce_url.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["torrent_id"], ["torrent_stream.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("torrent_id", "announce_id"),
    )
    op.create_table(
        "torrent_language_link",
        sa.Column("torrent_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("language_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["language_id"], ["language.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["torrent_id"], ["torrent_stream.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("torrent_id", "language_id"),
    )
    op.create_table(
        "tv_stream_namespace_link",
        sa.Column("stream_id", sa.Integer(), nullable=False),
        sa.Column("namespace_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["namespace_id"], ["namespace.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["stream_id"], ["tv_stream.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("stream_id", "namespace_id"),
    )
    op.create_table(
        "episode",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("season_id", sa.Integer(), nullable=False),
        sa.Column("episode_number", sa.Integer(), nullable=False),
        sa.Column("filename", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("size", sa.BigInteger(), nullable=True),
        sa.Column("file_index", sa.Integer(), nullable=True),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("released", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["season_id"], ["season.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("season_id", "episode_number"),
    )
    op.create_index(
        op.f("ix_episode_episode_number"), "episode", ["episode_number"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_episode_episode_number"), table_name="episode")
    op.drop_table("episode")
    op.drop_table("tv_stream_namespace_link")
    op.drop_table("torrent_language_link")
    op.drop_table("torrent_announce_link")
    op.drop_index("idx_season_torrent_number", table_name="season")
    op.drop_table("season")
    op.drop_index(op.f("ix_tv_stream_updated_at"), table_name="tv_stream")
    op.drop_index(op.f("ix_tv_stream_source"), table_name="tv_stream")
    op.drop_index(op.f("ix_tv_stream_meta_id"), table_name="tv_stream")
    op.drop_index(op.f("ix_tv_stream_is_working"), table_name="tv_stream")
    op.drop_index(op.f("ix_tv_stream_country"), table_name="tv_stream")
    op.drop_index("idx_tv_stream_meta_working", table_name="tv_stream")
    op.drop_table("tv_stream")
    op.drop_index(op.f("ix_tv_metadata_updated_at"), table_name="tv_metadata")
    op.drop_index(op.f("ix_tv_metadata_tv_language"), table_name="tv_metadata")
    op.drop_index(op.f("ix_tv_metadata_country"), table_name="tv_metadata")
    op.drop_table("tv_metadata")
    op.drop_index(op.f("ix_torrent_stream_updated_at"), table_name="torrent_stream")
    op.drop_index(op.f("ix_torrent_stream_source"), table_name="torrent_stream")
    op.drop_index(op.f("ix_torrent_stream_meta_id"), table_name="torrent_stream")
    op.drop_index(op.f("ix_torrent_stream_is_blocked"), table_name="torrent_stream")
    op.drop_index(
        "idx_torrent_stream_meta_blocked",
        table_name="torrent_stream",
        postgresql_where="NOT is_blocked",
    )
    op.drop_index("idx_torrent_meta_source", table_name="torrent_stream")
    op.drop_index(
        "idx_torrent_meta_created",
        table_name="torrent_stream",
        postgresql_where="NOT is_blocked",
    )
    op.drop_table("torrent_stream")
    op.drop_index(op.f("ix_series_metadata_updated_at"), table_name="series_metadata")
    op.drop_index(
        op.f("ix_series_metadata_parent_guide_nudity_status"),
        table_name="series_metadata",
    )
    op.drop_index(op.f("ix_series_metadata_imdb_rating"), table_name="series_metadata")
    op.drop_index(op.f("ix_series_metadata_end_year"), table_name="series_metadata")
    op.drop_table("series_metadata")
    op.drop_index(op.f("ix_movie_metadata_updated_at"), table_name="movie_metadata")
    op.drop_index(
        op.f("ix_movie_metadata_parent_guide_nudity_status"),
        table_name="movie_metadata",
    )
    op.drop_index(op.f("ix_movie_metadata_imdb_rating"), table_name="movie_metadata")
    op.drop_table("movie_metadata")
    op.drop_table("media_star_link")
    op.drop_table("media_parental_certificate_link")
    op.drop_table("media_genre_link")
    op.drop_index(
        op.f("ix_media_catalog_link_priority"), table_name="media_catalog_link"
    )
    op.drop_table("media_catalog_link")
    op.drop_index(op.f("ix_aka_title_title"), table_name="aka_title")
    op.drop_index(op.f("ix_aka_title_media_id"), table_name="aka_title")
    op.drop_table("aka_title")
    op.drop_index(op.f("ix_star_name"), table_name="star")
    op.drop_table("star")
    op.drop_index(
        op.f("ix_parental_certificate_name"), table_name="parental_certificate"
    )
    op.drop_table("parental_certificate")
    op.drop_table("namespace")
    op.drop_table("language")
    op.drop_index(op.f("ix_genre_name"), table_name="genre")
    op.drop_table("genre")
    op.drop_table("catalog")
    op.drop_index(op.f("ix_base_metadata_updated_at"), table_name="base_metadata")
    op.drop_index(op.f("ix_base_metadata_type"), table_name="base_metadata")
    op.drop_index(
        "idx_base_title_search",
        table_name="base_metadata",
        postgresql_using="gin",
        postgresql_ops={"title": "gin_trgm_ops"},
    )
    op.drop_index("idx_base_meta_type_title", table_name="base_metadata")
    op.drop_table("base_metadata")
    op.drop_table("announce_url")

    # drop enums
    op.execute("DROP TYPE IF EXISTS mediatype;")
    op.execute("DROP TYPE IF EXISTS nuditystatus;")
    op.execute("DROP TYPE IF EXISTS indexertype;")

    # drop extensions
    op.execute("DROP EXTENSION IF EXISTS pg_trgm;")
    op.execute("DROP EXTENSION IF EXISTS btree_gin;")
    # ### end Alembic commands ###
